name: Create Release on PR Merge

on:
  pull_request:
    types:
      - closed

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      (
        github.event.pull_request.title startsWith 'Docs:' ||
        github.event.pull_request.title startsWith 'Feat:' ||
        github.event.pull_request.title startsWith 'Fix:'
      )

    env:
      PR_TITLE: ${{ github.event.pull_request.title }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Get Latest Tag
        id: get-latest-tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
        shell: bash

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Get Script
        run: echo "${{ secrets.UPDATE_VERS_SCRIPT }}" > updateVers.py
        shell: bash

      - name: Update Version
        run: |
          NEW_TAG=$(python updateVers.py '${{ env.LATEST_TAG }}' '${{ env.PR_TITLE }}')
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
        id: create-next-tag

      - name: Create Tag
        if: ${{ env.NEW_TAG }} != ''
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git tag -f -a '${{ env.NEW_TAG }}' '${{ github.sha }}' -m 'Creato tag.'
          git push -f origin '${{ env.NEW_TAG }}'

      - name: Create Release
        if: ${{ env.NEW_TAG }} != ''
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          release_name: ${{ env.NEW_TAG }}
          body: ${{ env.PR_TITLE }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
